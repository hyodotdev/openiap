name: Sync Dependencies

on:
  push:
    branches:
      - main
    paths:
      - 'openiap-versions.json'

permissions:
  contents: read

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get version changes
        id: versions
        run: |
          set -euo pipefail

          # Get current versions
          GQL_VERSION=$(jq -r '.gql' openiap-versions.json)
          GOOGLE_VERSION=$(jq -r '.google' openiap-versions.json)
          APPLE_VERSION=$(jq -r '.apple' openiap-versions.json)

          # Get previous versions
          git show HEAD~1:openiap-versions.json > prev-versions.json
          PREV_GQL=$(jq -r '.gql' prev-versions.json)
          PREV_GOOGLE=$(jq -r '.google' prev-versions.json)
          PREV_APPLE=$(jq -r '.apple' prev-versions.json)

          # Check what changed
          GQL_CHANGED="false"
          GOOGLE_CHANGED="false"
          APPLE_CHANGED="false"

          if [ "$GQL_VERSION" != "$PREV_GQL" ]; then
            GQL_CHANGED="true"
          fi

          if [ "$GOOGLE_VERSION" != "$PREV_GOOGLE" ]; then
            GOOGLE_CHANGED="true"
          fi

          if [ "$APPLE_VERSION" != "$PREV_APPLE" ]; then
            APPLE_CHANGED="true"
          fi

          echo "gql_version=$GQL_VERSION" >> $GITHUB_OUTPUT
          echo "google_version=$GOOGLE_VERSION" >> $GITHUB_OUTPUT
          echo "apple_version=$APPLE_VERSION" >> $GITHUB_OUTPUT
          echo "gql_changed=$GQL_CHANGED" >> $GITHUB_OUTPUT
          echo "google_changed=$GOOGLE_CHANGED" >> $GITHUB_OUTPUT
          echo "apple_changed=$APPLE_CHANGED" >> $GITHUB_OUTPUT

          echo "Version changes:"
          echo "  GQL: $PREV_GQL -> $GQL_VERSION (changed: $GQL_CHANGED)"
          echo "  Google: $PREV_GOOGLE -> $GOOGLE_VERSION (changed: $GOOGLE_CHANGED)"
          echo "  Apple: $PREV_APPLE -> $APPLE_VERSION (changed: $APPLE_CHANGED)"

      - name: Create PR for react-native-iap
        if: steps.versions.outputs.gql_changed == 'true' || steps.versions.outputs.google_changed == 'true' || steps.versions.outputs.apple_changed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPENDENCY_UPDATE_PAT }}
          script: |
            const gqlVersion = '${{ steps.versions.outputs.gql_version }}';
            const googleVersion = '${{ steps.versions.outputs.google_version }}';
            const appleVersion = '${{ steps.versions.outputs.apple_version }}';
            const gqlChanged = '${{ steps.versions.outputs.gql_changed }}' === 'true';
            const googleChanged = '${{ steps.versions.outputs.google_changed }}' === 'true';
            const appleChanged = '${{ steps.versions.outputs.apple_changed }}' === 'true';

            const owner = 'hyochan';
            const repo = 'react-native-iap';
            const branchName = `update-openiap-versions-${Date.now()}`;

            // Get default branch
            const { data: repoData } = await github.rest.repos.get({ owner, repo });
            const defaultBranch = repoData.default_branch;

            // Get the latest commit SHA of the default branch
            const { data: refData } = await github.rest.git.getRef({
              owner,
              repo,
              ref: `heads/${defaultBranch}`
            });
            const latestCommitSha = refData.object.sha;

            // Create a new branch
            await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/heads/${branchName}`,
              sha: latestCommitSha
            });

            // Get current openiap-versions.json
            let currentFile;
            try {
              const { data } = await github.rest.repos.getContent({
                owner,
                repo,
                path: 'openiap-versions.json',
                ref: branchName
              });
              currentFile = data;
            } catch (error) {
              console.log('openiap-versions.json not found, will create new file');
            }

            // Update the file
            const newContent = JSON.stringify({
              gql: gqlVersion,
              google: googleVersion,
              apple: appleVersion
            }, null, 2) + '\n';

            await github.rest.repos.createOrUpdateFileContents({
              owner,
              repo,
              path: 'openiap-versions.json',
              message: 'chore: update openiap versions',
              content: Buffer.from(newContent).toString('base64'),
              branch: branchName,
              sha: currentFile?.sha
            });

            // Create PR
            const changes = [];
            if (gqlChanged) changes.push(`GQL to ${gqlVersion}`);
            if (googleChanged) changes.push(`Google to ${googleVersion}`);
            if (appleChanged) changes.push(`Apple to ${appleVersion}`);

            const prTitle = 'chore: update openiap versions';
            const changesText = changes.map(c => `- ${c}`).join('\n');
            const gqlChangeText = gqlChanged ? `- **GQL**: Updated to \`${gqlVersion}\`\n` : '';
            const googleChangeText = googleChanged ? `- **Google (Android)**: Updated to \`${googleVersion}\`\n` : '';
            const appleChangeText = appleChanged ? `- **Apple (iOS)**: Updated to \`${appleVersion}\`\n` : '';

            const prBody = `## OpenIAP Version Update\n\nThis PR updates OpenIAP dependency versions:\n\n${changesText}\n\n### Changes\n${gqlChangeText}${googleChangeText}${appleChangeText}\n### Next Steps\nPlease review and update the implementation to use the new versions.\n\n---\n*This PR was automatically created by the OpenIAP sync workflow.*`;

            await github.rest.pulls.create({
              owner,
              repo,
              title: prTitle,
              body: prBody,
              head: branchName,
              base: defaultBranch
            });

      - name: Create PR for kmp-iap
        if: steps.versions.outputs.gql_changed == 'true' || steps.versions.outputs.google_changed == 'true' || steps.versions.outputs.apple_changed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPENDENCY_UPDATE_PAT }}
          script: |
            const gqlVersion = '${{ steps.versions.outputs.gql_version }}';
            const googleVersion = '${{ steps.versions.outputs.google_version }}';
            const appleVersion = '${{ steps.versions.outputs.apple_version }}';
            const gqlChanged = '${{ steps.versions.outputs.gql_changed }}' === 'true';
            const googleChanged = '${{ steps.versions.outputs.google_changed }}' === 'true';
            const appleChanged = '${{ steps.versions.outputs.apple_changed }}' === 'true';

            const owner = 'hyochan';
            const repo = 'kmp-iap';
            const branchName = `update-openiap-versions-${Date.now()}`;

            // Get default branch
            const { data: repoData } = await github.rest.repos.get({ owner, repo });
            const defaultBranch = repoData.default_branch;

            // Get the latest commit SHA of the default branch
            const { data: refData } = await github.rest.git.getRef({
              owner,
              repo,
              ref: `heads/${defaultBranch}`
            });
            const latestCommitSha = refData.object.sha;

            // Create a new branch
            await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/heads/${branchName}`,
              sha: latestCommitSha
            });

            // Get current openiap-versions.json
            let currentFile;
            try {
              const { data } = await github.rest.repos.getContent({
                owner,
                repo,
                path: 'openiap-versions.json',
                ref: branchName
              });
              currentFile = data;
            } catch (error) {
              console.log('openiap-versions.json not found, will create new file');
            }

            // Update the file
            const newContent = JSON.stringify({
              gql: gqlVersion,
              google: googleVersion,
              apple: appleVersion
            }, null, 2) + '\n';

            await github.rest.repos.createOrUpdateFileContents({
              owner,
              repo,
              path: 'openiap-versions.json',
              message: 'chore: update openiap versions',
              content: Buffer.from(newContent).toString('base64'),
              branch: branchName,
              sha: currentFile?.sha
            });

            // Create PR
            const changes = [];
            if (gqlChanged) changes.push(`GQL to ${gqlVersion}`);
            if (googleChanged) changes.push(`Google to ${googleVersion}`);
            if (appleChanged) changes.push(`Apple to ${appleVersion}`);

            const prTitle = 'chore: update openiap versions';
            const changesText = changes.map(c => `- ${c}`).join('\n');
            const gqlChangeText = gqlChanged ? `- **GQL**: Updated to \`${gqlVersion}\`\n` : '';
            const googleChangeText = googleChanged ? `- **Google (Android)**: Updated to \`${googleVersion}\`\n` : '';
            const appleChangeText = appleChanged ? `- **Apple (iOS)**: Updated to \`${appleVersion}\`\n` : '';

            const prBody = `## OpenIAP Version Update\n\nThis PR updates OpenIAP dependency versions:\n\n${changesText}\n\n### Changes\n${gqlChangeText}${googleChangeText}${appleChangeText}\n### Next Steps\nPlease review and update the implementation to use the new versions.\n\n---\n*This PR was automatically created by the OpenIAP sync workflow.*`;

            await github.rest.pulls.create({
              owner,
              repo,
              title: prTitle,
              body: prBody,
              head: branchName,
              base: defaultBranch
            });

      - name: Create PR for flutter_inapp_purchase
        if: steps.versions.outputs.gql_changed == 'true' || steps.versions.outputs.google_changed == 'true' || steps.versions.outputs.apple_changed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPENDENCY_UPDATE_PAT }}
          script: |
            const gqlVersion = '${{ steps.versions.outputs.gql_version }}';
            const googleVersion = '${{ steps.versions.outputs.google_version }}';
            const appleVersion = '${{ steps.versions.outputs.apple_version }}';
            const gqlChanged = '${{ steps.versions.outputs.gql_changed }}' === 'true';
            const googleChanged = '${{ steps.versions.outputs.google_changed }}' === 'true';
            const appleChanged = '${{ steps.versions.outputs.apple_changed }}' === 'true';

            const owner = 'hyochan';
            const repo = 'flutter_inapp_purchase';
            const branchName = `update-openiap-versions-${Date.now()}`;

            // Get default branch
            const { data: repoData } = await github.rest.repos.get({ owner, repo });
            const defaultBranch = repoData.default_branch;

            // Get the latest commit SHA of the default branch
            const { data: refData } = await github.rest.git.getRef({
              owner,
              repo,
              ref: `heads/${defaultBranch}`
            });
            const latestCommitSha = refData.object.sha;

            // Create a new branch
            await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/heads/${branchName}`,
              sha: latestCommitSha
            });

            // Get current openiap-versions.json
            let currentFile;
            try {
              const { data } = await github.rest.repos.getContent({
                owner,
                repo,
                path: 'openiap-versions.json',
                ref: branchName
              });
              currentFile = data;
            } catch (error) {
              console.log('openiap-versions.json not found, will create new file');
            }

            // Update the file
            const newContent = JSON.stringify({
              gql: gqlVersion,
              google: googleVersion,
              apple: appleVersion
            }, null, 2) + '\n';

            await github.rest.repos.createOrUpdateFileContents({
              owner,
              repo,
              path: 'openiap-versions.json',
              message: 'chore: update openiap versions',
              content: Buffer.from(newContent).toString('base64'),
              branch: branchName,
              sha: currentFile?.sha
            });

            // Create PR
            const changes = [];
            if (gqlChanged) changes.push(`GQL to ${gqlVersion}`);
            if (googleChanged) changes.push(`Google to ${googleVersion}`);
            if (appleChanged) changes.push(`Apple to ${appleVersion}`);

            const prTitle = 'chore: update openiap versions';
            const changesText = changes.map(c => `- ${c}`).join('\n');
            const gqlChangeText = gqlChanged ? `- **GQL**: Updated to \`${gqlVersion}\`\n` : '';
            const googleChangeText = googleChanged ? `- **Google (Android)**: Updated to \`${googleVersion}\`\n` : '';
            const appleChangeText = appleChanged ? `- **Apple (iOS)**: Updated to \`${appleVersion}\`\n` : '';

            const prBody = `## OpenIAP Version Update\n\nThis PR updates OpenIAP dependency versions:\n\n${changesText}\n\n### Changes\n${gqlChangeText}${googleChangeText}${appleChangeText}\n### Next Steps\nPlease review and update the implementation to use the new versions.\n\n---\n*This PR was automatically created by the OpenIAP sync workflow.*`;

            await github.rest.pulls.create({
              owner,
              repo,
              title: prTitle,
              body: prBody,
              head: branchName,
              base: defaultBranch
            });

      - name: Create PR for expo-iap
        if: steps.versions.outputs.gql_changed == 'true' || steps.versions.outputs.google_changed == 'true' || steps.versions.outputs.apple_changed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPENDENCY_UPDATE_PAT }}
          script: |
            const gqlVersion = '${{ steps.versions.outputs.gql_version }}';
            const googleVersion = '${{ steps.versions.outputs.google_version }}';
            const appleVersion = '${{ steps.versions.outputs.apple_version }}';
            const gqlChanged = '${{ steps.versions.outputs.gql_changed }}' === 'true';
            const googleChanged = '${{ steps.versions.outputs.google_changed }}' === 'true';
            const appleChanged = '${{ steps.versions.outputs.apple_changed }}' === 'true';

            const owner = 'hyochan';
            const repo = 'expo-iap';
            const branchName = `update-openiap-versions-${Date.now()}`;

            // Get default branch
            const { data: repoData } = await github.rest.repos.get({ owner, repo });
            const defaultBranch = repoData.default_branch;

            // Get the latest commit SHA of the default branch
            const { data: refData } = await github.rest.git.getRef({
              owner,
              repo,
              ref: `heads/${defaultBranch}`
            });
            const latestCommitSha = refData.object.sha;

            // Create a new branch
            await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/heads/${branchName}`,
              sha: latestCommitSha
            });

            // Get current openiap-versions.json
            let currentFile;
            try {
              const { data } = await github.rest.repos.getContent({
                owner,
                repo,
                path: 'openiap-versions.json',
                ref: branchName
              });
              currentFile = data;
            } catch (error) {
              console.log('openiap-versions.json not found, will create new file');
            }

            // Update the file
            const newContent = JSON.stringify({
              gql: gqlVersion,
              google: googleVersion,
              apple: appleVersion
            }, null, 2) + '\n';

            await github.rest.repos.createOrUpdateFileContents({
              owner,
              repo,
              path: 'openiap-versions.json',
              message: 'chore: update openiap versions',
              content: Buffer.from(newContent).toString('base64'),
              branch: branchName,
              sha: currentFile?.sha
            });

            // Create PR
            const changes = [];
            if (gqlChanged) changes.push(`GQL to ${gqlVersion}`);
            if (googleChanged) changes.push(`Google to ${googleVersion}`);
            if (appleChanged) changes.push(`Apple to ${appleVersion}`);

            const prTitle = 'chore: update openiap versions';
            const changesText = changes.map(c => `- ${c}`).join('\n');
            const gqlChangeText = gqlChanged ? `- **GQL**: Updated to \`${gqlVersion}\`\n` : '';
            const googleChangeText = googleChanged ? `- **Google (Android)**: Updated to \`${googleVersion}\`\n` : '';
            const appleChangeText = appleChanged ? `- **Apple (iOS)**: Updated to \`${appleVersion}\`\n` : '';

            const prBody = `## OpenIAP Version Update\n\nThis PR updates OpenIAP dependency versions:\n\n${changesText}\n\n### Changes\n${gqlChangeText}${googleChangeText}${appleChangeText}\n### Next Steps\nPlease review and update the implementation to use the new versions.\n\n---\n*This PR was automatically created by the OpenIAP sync workflow.*`;

            await github.rest.pulls.create({
              owner,
              repo,
              title: prTitle,
              body: prBody,
              head: branchName,
              base: defaultBranch
            });
