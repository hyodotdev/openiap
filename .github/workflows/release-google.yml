name: Google Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix, e.g. 1.2.14)'
        required: true
        type: string

env:
  GRADLE_OPTS: -Dorg.gradle.jvmargs="-Xmx4g -XX:+UseParallelGC"

permissions:
  contents: write

jobs:
  release:
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version
      id: version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        # Trim leading 'v' if present
        VERSION="${VERSION#v}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update version in openiap-versions.json
      working-directory: packages/google
      env:
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        # Update version in openiap-versions.json
        jq --arg version "$VERSION" '.google = $version' ../../openiap-versions.json > temp.json
        mv temp.json ../../openiap-versions.json

    - name: Commit version update
      env:
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git add openiap-versions.json

        if git diff --staged --quiet; then
          echo "No version changes to commit"
        else
          git commit -m "chore(google): bump version to $VERSION"
          git push origin main
        fi

    - name: Create tag
      env:
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        # Check if tag already exists
        if git rev-parse "google-v$VERSION" >/dev/null 2>&1; then
          echo "Tag google-v$VERSION already exists"
          exit 1
        fi

        git tag "google-v$VERSION"
        git push origin "google-v$VERSION"

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        cache-read-only: true

    - name: Grant execute permission for gradlew
      working-directory: packages/google
      run: chmod +x gradlew

    - name: Build and Test
      working-directory: packages/google
      env:
        ORG_GRADLE_PROJECT_openIapVersion: ${{ steps.version.outputs.version }}
      run: |
        ./gradlew :openiap:build --no-daemon --stacktrace
        ./gradlew :openiap:test --no-daemon --stacktrace

    - name: Publish to Maven Central
      working-directory: packages/google
      env:
        ORG_GRADLE_PROJECT_openIapVersion: ${{ steps.version.outputs.version }}
        ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
        ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_KEY_CONTENTS }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.SIGNING_KEY_ID }}
        ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}
      run: |
        if [ -z "$ORG_GRADLE_PROJECT_mavenCentralUsername" ]; then
          echo "⚠️ Maven Central credentials not set. Skipping publish."
        else
          ./gradlew :openiap:publishAndReleaseToMavenCentral --no-daemon --no-parallel --stacktrace
          echo "✅ Published to Maven Central"
        fi

    - name: Create release artifacts
      working-directory: packages/google
      run: |
        mkdir -p release-artifacts
        cp openiap/build/outputs/aar/*.aar release-artifacts/ 2>/dev/null || echo "No AAR files found"
        cp openiap/build/libs/*.jar release-artifacts/ 2>/dev/null || echo "No JAR files found"
        if [ -d release-artifacts ] && [ "$(ls -A release-artifacts)" ]; then
          (cd release-artifacts && shasum -a 256 * > ../checksums.txt) || true
          zip -r release-artifacts.zip release-artifacts/
        fi

    - name: Create GitHub Release
      working-directory: packages/google
      env:
        VERSION: ${{ steps.version.outputs.version }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Upload artifacts if they exist
        ARTIFACTS=""
        if [ -f release-artifacts.zip ]; then
          ARTIFACTS="$ARTIFACTS release-artifacts.zip"
        fi
        if [ -f checksums.txt ]; then
          ARTIFACTS="$ARTIFACTS checksums.txt"
        fi

        # Generate release notes with changelog
        gh release create "google-v$VERSION" \
          $ARTIFACTS \
          --title "Google v$VERSION" \
          --generate-notes \
          --notes "## OpenIAP Google v$VERSION

        ### Installation

        **Gradle (Kotlin DSL):**
        \`\`\`kotlin
        dependencies {
            implementation(\"io.github.hyochan.openiap:openiap-google:$VERSION\")
        }
        \`\`\`

        **Gradle (Groovy):**
        \`\`\`groovy
        dependencies {
            implementation 'io.github.hyochan.openiap:openiap-google:$VERSION'
        }
        \`\`\`

        ### Documentation
        - [API Documentation](https://openiap.dev)
        - [GitHub](https://github.com/hyodotdev/openiap/tree/main/packages/google)

        ### Maven Central
        - [View on Maven Central](https://central.sonatype.com/artifact/io.github.hyochan.openiap/openiap-google/$VERSION)"
