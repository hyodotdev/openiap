name: Apple Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix, e.g. 1.2.24)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version
      id: version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        # Trim leading 'v' if present
        VERSION="${VERSION#v}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Check if tag already exists
      id: check_tag
      env:
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        if git rev-parse "apple-v$VERSION" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "❌ Tag apple-v$VERSION already exists. Skipping release."
          exit 1
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "✓ Tag apple-v$VERSION does not exist, proceeding with release"
        fi

    - name: Update version in openiap-versions.json
      working-directory: packages/apple
      env:
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        # Update version in openiap-versions.json
        jq --arg version "$VERSION" '.apple = $version' ../../openiap-versions.json > temp.json
        mv temp.json ../../openiap-versions.json

    - name: Sync version files
      run: ./scripts/sync-versions.sh

    - name: Commit version update
      env:
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git add openiap-versions.json packages/*/openiap-versions.json

        if git diff --staged --quiet; then
          echo "No version changes to commit"
        else
          git commit -m "chore(apple): bump version to $VERSION"
          git push origin main
        fi

    - name: Select Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode.app

    - name: Build and Test
      working-directory: packages/apple
      run: |
        swift build
        swift test

    - name: Create and push tag
      env:
        VERSION: ${{ steps.version.outputs.version }}
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        # Check if tag already exists
        if git rev-parse "apple-v$VERSION" >/dev/null 2>&1; then
          echo "Tag apple-v$VERSION already exists"
        else
          git tag "apple-v$VERSION"
          git push origin "apple-v$VERSION"
          echo "✅ Created and pushed tag apple-v$VERSION"
        fi

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'
        bundler-cache: false

    - name: Install CocoaPods
      run: |
        gem install cocoapods

    - name: Validate Podspec
      run: |
        # Remove symlink if exists and copy podspec to root for validation
        rm -f openiap.podspec
        cp packages/apple/openiap.podspec .
        pod lib lint openiap.podspec --allow-warnings

    - name: Deploy to CocoaPods
      env:
        COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
        COCOAPODS_VALIDATOR_SKIP_XCODEBUILD: 1
        CI: true
      run: |
        if [ -z "$COCOAPODS_TRUNK_TOKEN" ]; then
          echo "⚠️ COCOAPODS_TRUNK_TOKEN is not set. Skipping CocoaPods publish."
        else
          pod trunk push openiap.podspec --allow-warnings --skip-tests --verbose
          echo "✅ Published to CocoaPods"
        fi

    - name: Create GitHub Release
      env:
        VERSION: ${{ steps.version.outputs.version }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "apple-v$VERSION" \
          --title "Apple v$VERSION" \
          --latest \
          --generate-notes \
          --notes "## OpenIAP Apple v$VERSION

        ### Installation

        **CocoaPods:**
        \`\`\`ruby
        pod 'openiap', '~> $VERSION'
        \`\`\`

        **Swift Package Manager:**
        \`\`\`swift
        dependencies: [
            .package(url: \"https://github.com/hyodotdev/openiap.git\", from: \"$VERSION\")
        ]
        \`\`\`

        ### Documentation
        - [API Documentation](https://openiap.dev)
        - [GitHub](https://github.com/hyodotdev/openiap/tree/main/packages/apple)"
